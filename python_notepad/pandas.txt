	 ############ pandas  ########  df.loc[(df['name']==2) & df['mane2']==3)]
Pandas is an open-source Python Library providing high-performance data manipulation and analysis tool using its powerful data structures. The name Pandas is derived from the word Panel Data – an Econometrics from Multidimensional data.
rior to Pandas, Python was majorly used for data munging and preparation. It had very little contribution towards data analysis. Pandas solved this problem. Using Pandas, we can accomplish five typical steps in the processing and analysis of data, regardless of the origin of data — load, prepare, manipulate, model, and analyze.


   ###########  Key Features of Pandas  ############
1. Fast and efficient Data Frame object with default and customized indexing.
2. Tools for loading data into in-memory data objects from different file formats.
3. Data alignment and integrated handling of missing data.
4. Reshaping and pivoting of date sets.
5. Label-based slicing, indexing and sub-setting of large data sets.
6. Columns from a data structure can be deleted or inserted.
7. Group by data for aggregation and transformations.
8. High performance merging and joining of data.
9. Time Series functionality.


 pip install pandas

  ######### Pandas deals with the following three data structures −  ###########

        Series
        DataFrame   #mostly used
        Panel

  #### 1.series  #####

pandas.Series( data, index, dtype, copy)
The parameters of the constructor are as follows −

Sr.No	      Parameter & Description

1	      data
              data takes various forms like ndarray, list, constants

2	       index
               Index values must be unique and hashable, same length as data. Default np.arrange(n) if no index is passed.

3	       dtype
               dtype is for data type. If None, data type will be inferred

4	      copy
              Copy data. Default False
Eg.
data = np.array(['a','b','c','d'])
s = pd.Series(data,index=[100,101,102,103])
print s 
print data[100]  ##indexing to give value of a corrosponding to 100
data.index    #show start end and dtype

indA = pd.Index([1, 3, 5, 7, 9])
indB = pd.Index([2, 3, 5, 7, 11])
indA & indB
indA | indB
indA ^ indB

pd.Series(5, index=[100, 200, 300])


  ##### 2. data frame  ####

A pandas DataFrame can be created using various inputs like −

   Lists
   dict
   Series
   Numpy ndarrays
   Another DataFrame

Ex.
data = [1,2,3,4,5]
df = pd.DataFrame(data)
print df

data = [['Alex',10],['Bob',12],['Clarke',13]]
df = pd.DataFrame(data,columns=['Name','Age'])
print df

data = {'Name':['Tom', 'Jack', 'Steve', 'Ricky'],'Age':[28,34,29,42]}
df = pd.DataFrame(data, index=['rank1','rank2','rank3','rank4'])
print df                                                             #Create a DataFrame from Dict of ndarrays / Lists

data = [{'a': 1, 'b': 2},{'a': 5, 'b': 10, 'c': 20}]
df = pd.DataFrame(data)
print df                                                  #Create a DataFrame from List of Dicts

pd.DataFrame({'population': population,
              'area': area})

pd.DataFrame(np.random.rand(3, 2),
             columns=['foo', 'bar'],
             index=['a', 'b', 'c'])


  ##### Analysis on pandas ######

   dataset=pd.read_csv("path/name.csv")
   dataset.info()                           #all information of datatype,null or not etc.
   dataset.discribe()                       #all distriptive statistics info mean,median,mode etc.
   dataset.head()                           #first 5 rows display
   dataset.head(10)                         #first 10 rows display
   dataset.tail()                           #last 5 rows display
   dataset.shape()                          #(rows,col) maxtrics shows
   

     ## missing value handdling ##

   dataset.isnull.sum()              #all null value count shows by each col
   dataset.dropna(inplace=True)      #null value is small then drop the corrosponding rows of the data
   dataset.dropna(index=1)           #drop  null value corrosponding to column not row defult row is deleted
   df.dropna(axis='columns', how='all')  #drop column when all valus are missing
   
   #filling null value#

  dataset.fillna(0,inplace=True)     #replace all the null value by zero
  dataset.replace(0,10)              #replace all dataset by zero to the 10
  dataset["col_name"].replace("wai","nagewadi")   #replace perticuler categorical value of perticuler column

   ##forword and backword fill ##
  dataset.fillna(method="ffill")     #fill null value by above cell of null value but more than 2 null value same times then it not good work
  dataset.fillna(method="bfill",axis=1)     #fill null value by back cell of that null value axis=1 means left column value fill in that col
  
  a=dataset["col_name"].mean()                   #calculate mean of the perticuler column
  m=round(a,2)                   #after decimal 2 number gives
  dataset["col_name"].fillna(m,inplace=True)     #fill all null value of that col in that mean

  df['four']=df['one']+df['three']        #create new col and and addition of both columns
  df.pop('two')                           #drop the perticuler column
  del df['one']

   #####  loc and iloc function - use for slicing  ######

  data['Florida':'Illinois']
  data[1:3]

  dataset.loc[dataset["col_name"]="cat_name"]                           #loc is oprate in labele(col_name) not for indexing and it gives all the index values
  dataset.loc[(datasert[col_name"]>12) & (dataset["col_name"]<33)]      #shows value of perticuler range
  dataset.loc[1:3,["col_1","col_2"]]                                    # display 1 to 3 row and 2 columns
  dataset.loc[dataset["col_name"]==1]   

  dataset.iloc[1:3,[2,5,8]]                                           #here all in index based not use lable and shows 1 to 3-1 rows and whatever col you give an index
  dataset.iloc[1:4,2:6]                                               #show row and col whatever you give in input
  dataset.iloc[:,[2,5,8]]
  data.iloc[0, 2] = 90        #0th row and 2nd column put value by 90

        #### save notebook file to excel  ######

   dataset.to_csv("update_data.csv",inplace=True,index=False)

     ########  Lambda function  #######

    x=lambda  a : a+20
      print(x(20))
  output : 40              simply lambda function is one line code to assine value it exicute and give the result according to the condition


1         T
          Transposes rows and columns.
2	  axes
          Returns a list with the row axis labels and column axis labels as the only members.
3	  dtypes
          Returns the dtypes in this object.
4	  empty
          True if NDFrame is entirely empty [no items]; if any of the axes are of length 0.
5	  ndim
          Number of axes / array dimensions.
6	  shape
          Returns a tuple representing the dimensionality of the DataFrame.
7	  size
          Number of elements in the NDFrame.
8	  values
          Numpy representation of NDFrame.
9	  head()
          Returns the first n rows.
10	  tail()
          Returns last n rows.

  eg
      dataset["col_name"].dtypes


      ######## Discriptive statistics  #########

1	count()     	 Number of non-null observations
2	sum()	         Sum of values
3	mean()	         Mean of Values
4	median()	 Median of Values
5	mode()         	 Mode of values
6	std()	         Standard Deviation of the Values
7	min()	         Minimum Value
8	max()	         Maximum Value
9	abs()	         Absolute Value
10	prod()	         Product of Values
11	cumsum()	 Cumulative Sum
12	cumprod()	 Cumulative Product

   eg.
       dataset["col_name"].sum()


  ###  sorting ###
unsorted_df = pd.DataFrame(np.random.randn(10,2),index=[1,4,6,2,3,5,9,8,0,7],colu
   mns = ['col2','col1'])

sorted_df=unsorted_df.sort_index()
print sorted_df                                 #sort by index


unsorted_df = pd.DataFrame({'col1':[2,1,1,1],'col2':[1,3,2,4]})
   sorted_df = unsorted_df.sort_values(by='col1')

print sorted_df                                # sort by values


df = pd.DataFrame(np.random.randn(8, 4), columns = ['A', 'B', 'C', 'D'])
# Index slicing
print df.ix[:,'A']             #mixture of loc and iloc
 