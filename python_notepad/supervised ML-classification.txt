
        ############ supervised learning - classification problem  ###########

      ############## Logistic Regression ##########
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import os

os.chdir('C:\\Users\Hp\Desktop\\Pyt_language\\machine-learning')
df = pd.read_csv('Social_Network_Ads.csv')
df

x = df.iloc[:,2:4].values
y = df.iloc[:,4].values

from sklearn.preprocessing import StandardScaler
sc_x = StandardScaler()
x = sc_x.fit_transform(x)
x                                               #convert data into standerdization form

x_train.size

from sklearn.linear_model import LogisticRegression
logmodel = LogisticRegression()
logmodel.fit(x_train,y_train)                        #train the model

y_pred = logmodel.predict(x)
y_pred                                               #test the model

from sklearn.metrics  import  confusion_matrix
cm = confusion_matrix(y,y_pred)
cm                                                        #confusion matrix

from sklearn.metrics import accuracy_score 
accuracy_score(y,y_pred)

from sklearn.metrics import classification_report 
print(classification_report(y,y_pred))                    #give report of all data

from sklearn.metrics import roc_auc_score
roc_auc_score(y_test,y_pred)                     ##calculate the ROC curve

plt.scatter(df.age,df.bought_insurance,marker='+',color='red')      #plot the graph of responce variable and check the nature of graph paper


         ################   SVM classifier    ##################


from sklearn.svm import SVC
classifier = SVC(kernel = 'rbf')
classifier.fit(x_train,y_train)
y_pred = classifier.predict(x)
print(accuracy_score(y,y_pred))
print(classification_report(y,y_pred))
print(confusion_matrix(y,y_pred))                     #crate model through rbf kurnel


df_x = pd.DataFrame(df)
df_y = pd.DataFrame(y,columns = ['Y'])
df_ypred = pd.DataFrame(y_pred, columns = ['ypred'])
result = pd.concat([df_x,df_y,df_ypred],axis = 1)
print(result.head(50))
result.to_excel('C:\\Users\\Hp\\Desktop\\Pyt_language\\machine-learning\\Social_network_adds.xlsx')     #with help of predicted variable save new data in excel file 

    ##analyse bunch formate dataset ##

from sklearn.datasets import load_breast_cancer
cancer_dataset = load_breast_cancer()               #bunch dataset load

os.chdir("C:\\Users\\Hp\Desktop\\Pyt_language\\machine-learning\\Brest cancer")
df = pd.read_csv('breast_cancer_raw.csv')
df.head()

cancer_dataset.keys()             ##dataset col name
cancer_dataset['data']
cancer_dataset['target']

cancer_df = pd.DataFrame(np.c_[cancer_dataset['data'],cancer_dataset['target']],
             columns = np.append(cancer_dataset['feature_names'], ['target']))         #create dataframe

cancer_df.to_csv('breast_cancer_dataframe.csv')                            #save dataframe in new excel sheet

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train_sc = sc.fit_transform(X_train)
X_test_sc = sc.transform(X_test)                            # standerdized data

from sklearn.svm import SVC
classification_rbf= SVC(kernel='rbf')
classification_rbf.fit(X_train_sc,y_train)
classification_rbf.score(X_test_sc,y_test)                # rbf kernel

from sklearn.svm import SVC
classification_poly= SVC(kernel='poly',degree= 3)
classification_poly.fit(X_train_sc,y_train)
classification_poly.score(X_test_sc,y_test)             #polynomial kernel

from sklearn.svm import SVC
classification_linear= SVC(kernel='linear')
classification_linear.fit(X_train_sc,y_train)
classification_linear.score(X_test_sc,y_test)             # linear kernel


               #####################   Decision Tree Classifer  #####################


print('shape of x_train =',x_train.shape)
print('shape of y_train =',y_train.shape)
print('shape of x_test =',x_test.shape)
print('shape of y_test =',y_test.shape)

from sklearn.tree import DecisionTreeClassifier
classifier = DecisionTreeClassifier(criterion= 'gini')
classifier.fit(x_train, y_train)                             #Criteria gini

from sklearn.tree import DecisionTreeClassifier
classifier = DecisionTreeClassifier(criterion= 'entropy')
classifier.fit(x_train, y_train)                              #Criteria inttropy


         #######################   Random Forest classifier  #################

print('shape of x_train =',x_train.shape)
print('shape of x_test =',x_test.shape)
print('shape of y_train =',y_train.shape)
print('shape of y_test =',y_test.shape)

from sklearn.ensemble import RandomForestClassifier
classifier = RandomForestClassifier(n_estimators=100,criterion='gini')
classifier.fit(x_train,y_train)

classifier.score(x_test,y_test)          #check accuracy score

pred = classifier.predict(x_test)
pred

from sklearn.ensemble import RandomForestClassifier
classifier = RandomForestClassifier(n_estimators=100,criterion='entropy')
classifier.fit(x_train,y_train)                                                #criteria is intropy

pred = classifier.predict(x_test)
pred

from sklearn.metrics import accuracy_score
accuracy_score(y_test,y_pred)                          #accuracy score

from sklearn.metrics import classification_report 
print(classification_report (y_test,y_pred))           #clsssification report

from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test,y_pred)
print(cm)                                            # confusion matrix



               ################### Nave bise classifer-goussioan,multinomial and binary types  ######################

from sklearn.model_selection import train_test_split 
x_train,x_test,y_train,y_test = train_test_split(x,y,test_size = 0.2, random_state = 50)
x_test

from sklearn.naive_bayes import GaussianNB
classifier = GaussianNB()
classifier.fit(x_train,y_train)                               #gaussion nave bayes

from sklearn.naive_bayes import MultinomialNB
classifier_m = MultinomialNB()
classifier_m.fit(x_train,y_train)                              #multinomial

from sklearn.naive_bayes import BernoulliNB
classifier_b =  BernoulliNB()
classifier_b.fit(x_train, y_train)                            #burnouli

classifier_b.score(x_test,y_test)        #check accuracy score

y_pred = classifier.predict(x)
y_pred

# pair plot of sample feature
sns.pairplot(cancer_df, hue = 'target_names', 
             vars = ['mean radius', 'mean texture', 'mean perimeter', 'mean area', 'mean smoothness'] )

# Heatmap of Correlation matrix of breast cancer DataFrame
plt.figure(figsize=(20,20))
sns.heatmap(cancer_df.corr(), annot = True, cmap ='coolwarm', linewidths=2)


    ####################### KNN classifire  #####################

from sklearn.neighbors import KNeighborsClassifier
classifier = KNeighborsClassifier(n_neighbors= 7)
classifier.fit(x_train,y_train)

classifier.score(x_test,y_test)      #score accuracy

y_pred = classifier.predict(x_test)
y_pred







 