 
  ###########  Numpy  ###########
 
  import numpy as np
  np.__version__

  a=np.array([3.3,4,5,6]) 
  type(a)
  p=np.array(s,dtype=int)
  n=np.array([range(i,i+4) for i in [3,6,8]])
  j=np.arange(1,44,3)                            #print value 1 to 44 by diff of 3
  np.ones((3,3),dtype=float)                     #create (3,3) matrix with fill all values by one
  np.full((4,5),66)                              #create (3,3) matrix with fill all values by 66
  np.linspace(4,88,7)                            #between 4,to 88 data divide 7 equal part
  np.random.random((3,3))                        #fill (3,3) with fill matrix by uniform random number
  np.random.normal(3,9,(4,4))                    
  np.random.randint(4,7,(2,3))
  np.eye(4)                                      #create (4,4) identity matrix

  x1=np.random.randint(6,size=5)                 # 1-D array
  x2=np.random.randint(3,9,size=(3,3))           # 2-D array
  x3=np.random.randint(1,7,size=(2,2,3))         # 3-D array 

  def information(x):
    print("demension is :" ,x.ndim)
    print("shape is :", x.shape)
    print("The size is :", x.size)
    print("dtype:", x.dtype)
    print("itemsize:", x.itemsize, "bytes")
    print("nbytes:", x.nbytes, "bytes")

  x1[-1]                  #indexing
  x2[1,1] ; x2[2][2]
  x2[:][2]
  x3[0,1,1]

  x=np.arange(10)       #slicing
  x[3:6]
  x[::-1]         # reverse the array

  x = [1, 2, 3, 99, 99, 3, 2, 1]
  x1, x2, x3 = np.split(x, [3, 5])     #Reshape
  print(x1, x2, x3)

  a.reshape(1,3)
  abc=np.arange(1,10).reshape(3,3)

  np.concatenate([abc,abc],axis=1)
  np.hstack([abc,abc])              #concate both array in row wise (horizontally) - both code have same function

  np.concatenate([abc,abc],axis=0)  #defult axis=0
  np.vstack([abc,abc])              #concate both array in column wise (vertically) - both code have same function

  upper,lower=np.vsplit(abc11,[3])   #spitting first 3 row in upper function and other gose for lower function
  right,left=np.hsplit(abc11,[2])    #spitting first 2 col in right function and other gose for left function

  ######### Arithmetic array #############

  x = np.arange(4)
 print("x     =", x)
 print("x + 5 =", x + 5)
 print("x - 5 =", x - 5)
 print("x * 2 =", x * 2)
 print("x / 2 =", x / 2)
 print("x // 2 =", x // 2)  # floor division
 print("-x     = ", -x)
 print("x ** 2 = ", x ** 2)
 print("x % 2  = ", x % 2)    

  ########## Trignomeric function #############

  theta = np.linspace(0, np.pi, 3)
print("theta      = ", theta)
print("sin(theta) = ", np.sin(theta))
print("cos(theta) = ", np.cos(theta))
print("tan(theta) = ", np.tan(theta))

 ############# Exponent and algorithm  ##########

 x = [1, 2, 3]
print("x     =", x)
print("e^x   =", np.exp(x))
print("2^x   =", np.exp2(x))
print("3^x   =", np.power(3, x))

  ##########  avg,mean,  max  ###########

 np.sum                     Compute sum of elements 
np.prod                     Compute product of elements 
np.mean                     Compute median of elements 
np.std                      Compute standard deviation 
np.var                      Compute variance 
np.min                      Find minimum value 
np.max                      Find maximum value 
np.argmin                   Find index of minimum value 
np.argmax                   Find index of maximum value 
np.median                   Compute median of elements 
np.percentile               Compute rank-based statistics of elements 
np.any                      Evaluate whether any elements are true 
np.all                      Evaluate whether all elements are true 

    Ex.....
 
 print("Mean height:       ", heights.mean())
 print("Standard deviation:", heights.std())
 print("Minimum height:    ", heights.min())
 print("Maximum height:    ", heights.max())
 print("25th percentile:   ", np.percentile(heights, 25))
 print("Median:            ", np.median(heights))
 print("75th percentile:   ", np.percentile(heights, 75))

  M.min(axis=0)          # M is (3,3) matrix so find min value of each column
  M.min(axis=1)          # M is (3,3) matrix so find min value of each row

  M.absolute(x)       #calculate absolute value of the array

  ######### Histogram ###########

  %matplotlib inline
  import matplotlib.pyplot as plt
  import seaborn; seaborn.set()  # set plot style

  plt.hist(heights)
  plt.title('Height Distribution of US Presidents')
  plt.xlabel('height (cm)')
  plt.ylabel('number');
   


  ############  Boolen array  ###########

  ==   np.equal         !=   np.not_equal 
  <    np.less          <=   np.less_equal 
  >    np.greater       >=   np.greater_equal 

 np.any(x < 0)
 np.all(x == 6)

 x = np.array([1, 2, 3, 4, 5])
 x < 3  # less than

x = np.arange(10)
(x > 4) & (x < 8)

  ############  Fancy Indexing  ##########

 import numpy as np
 rand = np.random.RandomState(42)

 x = rand.randint(100, size=10)
 print(x)
 [x[3], x[7], x[2]]  #normal indexing also called as fancy indexing
